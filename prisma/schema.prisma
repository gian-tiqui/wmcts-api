/*
 * Formatting Format Example:
 * 
 * model Example {
 *    pk             Int           @id @default(autoincrement())
 *    field1         String        
 *    
 *    Relations should be separated
 *    
 *    fk             Int
 *    fkObject       Fk @relation(fields: [fk], references: [referenceId])
 *    
 *    Collections should be at the bottom level
 *
 *    examples       Example[]
 * }
*/

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int           @id @default(autoincrement())
  firstName           String        
  middleName          String?
  lastName            String
  email               String        @unique
  username            String        @unique
  password            String
  isDeleted           Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  refreshToken        String?
  secretAnswer        String?

  deptId              Int
  department          Department    @relation(fields: [deptId], references: [id])
  secretQuestionId    Int?
  secretQuestion      SecretQuestion? @relation(fields: [secretQuestionId], references: [id])   

  comments            Comment[]
  roles               Role[]        @relation("UserRoles")
  logs                Log[]   
  issuedTickets       Ticket[]      @relation("Issued")
  assignedTickets     Ticket[]      @relation("Assigned")
  serviceReports      ServiceReport[]
  notifications       Notification[]
}

model Role {
  id                  Int           @id @default(autoincrement())
  name                String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now()) 

  users               User[]        @relation("UserRoles")
}

model Department {
  id                  Int           @id @default(autoincrement())
  name                String        @unique
  code                String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())

  users               User[]
  categories          Category[]
  tickets             Ticket[]
}

model Category {
  id                  Int           @id @default(autoincrement())
  name                String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  deptId              Int
  department          Department    @relation(fields: [deptId], references: [id])

  tickets             Ticket[]
}

model Ticket {
  id                  Int           @id @default(autoincrement())
  title               String
  resolution          String?
  closingReason       String?
  description         String        @db.Text      
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  acknowledgedAt      DateTime?
  resolutionTime      DateTime?
  reportRequired      Boolean       @default(false)
  pauseReason         String?       

  issuerId            Int
  issuer              User          @relation("Issued", fields: [issuerId], references: [id])        
  assignedUserId      Int?
  assignedUser        User?         @relation("Assigned", fields: [assignedUserId], references: [id]) 
  statusId            Int
  status              Status        @relation(fields: [statusId], references: [id])
  deptId              Int
  department          Department    @relation(fields: [deptId], references: [id])
  categoryId          Int
  category            Category      @relation(fields: [categoryId], references: [id])
  priorityLevelId     Int
  priorityLevel       PriorityLevel @relation(fields: [priorityLevelId], references: [id])

  serviceReports      ServiceReport[]
  comments            Comment[]
  activities          Activity[]
}

model Activity {
  id                  Int           @id @default(autoincrement())
  title               String
  activity            String
  icon                String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  ticketId            Int
  ticket              Ticket        @relation(fields: [ticketId], references: [id])  
}

model PriorityLevel {
  id                  Int           @id @default(autoincrement())
  name                String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt  

  tickets             Ticket[]
}

model Comment {
  id                  Int           @id @default(autoincrement())
  comment             String?        @db.Text
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  userId              Int
  user                User          @relation(fields: [userId], references: [id])
  ticketId            Int
  ticket              Ticket        @relation(fields: [ticketId], references: [id])

  imageLocations      ImageLocation[]
}

model ServiceReport {
  id                  Int           @id @default(autoincrement())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  ticketId            Int
  ticket              Ticket        @relation(fields: [ticketId], references: [id])
  serviceReporterId   Int
  serviceReporter     User          @relation(fields: [serviceReporterId], references: [id])

  imageLocations      ImageLocation[]
}

model ImageLocation {
  id                  Int           @id @default(autoincrement())
  path                String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  serviceReportId     Int?
  serviceReport       ServiceReport? @relation(fields: [serviceReportId], references: [id])
  commentId           Int?
  comment             Comment?      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  fileTypeId          Int
  fileType            FileType      @relation(fields: [fileTypeId], references: [id], onDelete: Cascade)
}

model LogType {
  id                  Int           @id @default(autoincrement())
  type                String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  logs                Log[]
}

model LogMethod {
  id                  Int           @id @default(autoincrement())
  method              String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  logs                Log[]
}

model Log {
  id                  Int           @id @default(autoincrement())
  previousName        String
  previousDescription String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  typeId              Int
  type                LogType       @relation(fields: [typeId], references: [id])     
  methodId            Int
  method              LogMethod     @relation(fields: [methodId], references: [id])   
  loggerId            Int
  logger              User          @relation(fields: [loggerId], references: [id])
}

/*
 * new
 * acknowledged
 * assigned
 * escalated 
 * resolved
 * closed - can be reopened or closed-resolved
 * closed - resolved 
 * cancelled
 * onhold - show card for the reason
 */

model Status {
  id                  Int           @id @default(autoincrement())
  type                String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  tickets             Ticket[]
}

model SecretQuestion {
  id                  Int           @id @default(autoincrement())
  question            String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  user                User[]
}

model FileType {
  id                  Int           @id @default(autoincrement())
  type                String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  imageLocations      ImageLocation[]
}

model Notification {
  id                  Int            @id @default(autoincrement())
  title               String
  message             String         @db.Text
  viewed              Boolean        @default(false)

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  userId              Int
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}